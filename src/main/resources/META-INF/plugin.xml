<idea-plugin>
    <id>com.blacknebula.TestCherry</id>
    <name>TestCherry</name>
    <version>3.0</version>

    <vendor email="benkhalfallahhazem@gmail.com"
            url="https://github.com/Hazem-Ben-Khalfallah/test-cherry">
        Hazem Ben Khalfallah
    </vendor>

    <description><![CDATA[
    <b>About</b>
    <br/>
    Test Cherry Plugin <img src="https://github.com/Hazem-Ben-Khalfallah/test-cherry/raw/master/src/main/resources/images/logo.png"> aides java developers with writing @should style test units.
It aims to make it easier to make TDD with a really cool and easy approach that consist in annotating interface method with desired behaviour
    <br/>
    <a href="https://github.com/Hazem-Ben-Khalfallah/test-cherry/raw/master/snapshots/cherryTest_image1.png"><img src="https://github.com/Hazem-Ben-Khalfallah/test-cherry/raw/master/snapshots/cherryTest_image1.png" width="800"></a>
    <br/>
    <br/>
    So with this plugin you could generate a test class for this interface like this one automatically:
    <br/>
    <a href="https://github.com/Hazem-Ben-Khalfallah/test-cherry/raw/master/snapshots/cherryTest_image2.png"><img src="https://github.com/Hazem-Ben-Khalfallah/test-cherry/raw/master/snapshots/cherryTest_image2.png" width="800"></a>
    <br/>
    Follow this link to get more details <a href="https://github.com/Hazem-Ben-Khalfallah/test-cherry/blob/master/README.md">https://github.com/Hazem-Ben-Khalfallah/test-cherry/blob/master/README.md</a>.
    <br/><br/>
    <b>Credits</b>
    <br/>
    This Project is based on <a href="https://github.com/hablutzel1/GenerateTestCases">GenerateTestCases</a> project.
  ]]></description>

    <idea-version since-build="2020.2"/>

    <!-- please see https://www.jetbrains.org/intellij/sdk/docs/basics/getting_started/plugin_compatibility.html
         on how to target different products -->
    <depends>com.intellij.modules.java</depends>
    <depends>com.intellij.modules.lang</depends>

    <project-components>
        <component>
            <implementation-class>com.blacknebula.testcherry.model.TestCherrySettings</implementation-class>
        </component>
    </project-components>

    <actions>
        <action id="com.blacknebula.testcherry.actions.GenerateTestMethods"
                class="com.blacknebula.testcherry.actions.GenerateTestMethods"
                text="Generate Test Methods"
                description="It generates BDD test methods for class">
            <add-to-group group-id="ToolbarRunGroup" anchor="first"/>
        </action>
    </actions>

    <extensions defaultExtensionNs="com.intellij">
        <!--for settings-->
        <projectConfigurable id="testcherry"
                             instance="com.blacknebula.testcherry.codeinsight.TestCherryConfigurable"/>
        <!--for inspections of missing test methods -->
        <inspectionToolProvider implementation="com.blacknebula.testcherry.inspection.BddInspectionsToolProvider"/>

        <!--for adding support for @should tag-->
        <javadocTagInfo implementation="com.blacknebula.testcherry.javadoc.ShouldTagInfo"/>

        <!--*****************************************************-->
        <!--for references with renaming support of PsiDocTag-->
        <!--*******************************************************-->

        <psi.referenceContributor implementation="com.blacknebula.testcherry.util.ReferenceContributor"/>
        <!-- depending on a PsiElement type it suggest names (including the principal one) in the rename dialog-->
        <nameSuggestionProvider
                implementation="com.blacknebula.testcherry.refactor.ShouldDescriptionNameSuggestionProvider"/>

        <!-- rename element processor without support for inline renaming, TODO add support for inline renaming-->
        <renamePsiElementProcessor
                implementation="com.blacknebula.testcherry.refactor.ShouldTagsAwareRenameProcessor" order="first"/>

        <!--********************************************-->
        <!--For listening to method renaming-->
        <!--**************************************-->
        <refactoring.elementListenerProvider
                implementation="com.blacknebula.testcherry.refactor.listener.TestMethodRefactoringElementListenerProvider"/>
    </extensions>

</idea-plugin>